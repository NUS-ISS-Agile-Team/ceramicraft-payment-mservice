// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-payment-mservice/server/repository/model"
)

// UserAccountDao is an autogenerated mock type for the UserAccountDao type
type UserAccountDao struct {
	mock.Mock
}

// AddBalanceInTransaction provides a mock function with given fields: ctx, userID, amount, oldAmount, tx
func (_m *UserAccountDao) AddBalanceInTransaction(ctx context.Context, userID int, amount int, oldAmount int, tx *gorm.DB) error {
	ret := _m.Called(ctx, userID, amount, oldAmount, tx)

	if len(ret) == 0 {
		panic("no return value specified for AddBalanceInTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *gorm.DB) error); ok {
		r0 = rf(ctx, userID, amount, oldAmount, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserAccount provides a mock function with given fields: ctx, userAccount
func (_m *UserAccountDao) CreateUserAccount(ctx context.Context, userAccount *model.UserAccount) error {
	ret := _m.Called(ctx, userAccount)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccount) error); ok {
		r0 = rf(ctx, userAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserAccountByUserID provides a mock function with given fields: ctx, userID
func (_m *UserAccountDao) GetUserAccountByUserID(ctx context.Context, userID int) (*model.UserAccount, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByUserID")
	}

	var r0 *model.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.UserAccount, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.UserAccount); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubtractBalanceInTransaction provides a mock function with given fields: ctx, userID, amount, oldAmount, tx
func (_m *UserAccountDao) SubtractBalanceInTransaction(ctx context.Context, userID int, amount int, oldAmount int, tx *gorm.DB) (int, error) {
	ret := _m.Called(ctx, userID, amount, oldAmount, tx)

	if len(ret) == 0 {
		panic("no return value specified for SubtractBalanceInTransaction")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *gorm.DB) (int, error)); ok {
		return rf(ctx, userID, amount, oldAmount, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *gorm.DB) int); ok {
		r0 = rf(ctx, userID, amount, oldAmount, tx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *gorm.DB) error); ok {
		r1 = rf(ctx, userID, amount, oldAmount, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserAccountDao creates a new instance of UserAccountDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAccountDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAccountDao {
	mock := &UserAccountDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
