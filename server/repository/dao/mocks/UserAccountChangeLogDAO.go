// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-payment-mservice/server/repository/model"
)

// UserAccountChangeLogDAO is an autogenerated mock type for the UserAccountChangeLogDAO type
type UserAccountChangeLogDAO struct {
	mock.Mock
}

// CreateChangeLogInTransaction provides a mock function with given fields: ctx, changeLog, tx
func (_m *UserAccountChangeLogDAO) CreateChangeLogInTransaction(ctx context.Context, changeLog *model.UserAccountChangeLog, tx *gorm.DB) error {
	ret := _m.Called(ctx, changeLog, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateChangeLogInTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountChangeLog, *gorm.DB) error); ok {
		r0 = rf(ctx, changeLog, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryChangeLogs provides a mock function with given fields: ctx, query
func (_m *UserAccountChangeLogDAO) QueryChangeLogs(ctx context.Context, query *model.UserAccountChangeLogQuery) ([]*model.UserAccountChangeLog, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for QueryChangeLogs")
	}

	var r0 []*model.UserAccountChangeLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountChangeLogQuery) ([]*model.UserAccountChangeLog, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountChangeLogQuery) []*model.UserAccountChangeLog); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserAccountChangeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserAccountChangeLogQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserAccountChangeLogDAO creates a new instance of UserAccountChangeLogDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAccountChangeLogDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAccountChangeLogDAO {
	mock := &UserAccountChangeLogDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
