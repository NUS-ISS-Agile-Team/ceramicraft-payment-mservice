// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-payment-mservice/server/repository/model"
)

// RedeemCodeDao is an autogenerated mock type for the RedeemCodeDao type
type RedeemCodeDao struct {
	mock.Mock
}

// BatchInsert provides a mock function with given fields: ctx, redeemCodes
func (_m *RedeemCodeDao) BatchInsert(ctx context.Context, redeemCodes []*model.RedeemCode) error {
	ret := _m.Called(ctx, redeemCodes)

	if len(ret) == 0 {
		panic("no return value specified for BatchInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.RedeemCode) error); ok {
		r0 = rf(ctx, redeemCodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *RedeemCodeDao) GetByCode(ctx context.Context, code string) (*model.RedeemCode, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *model.RedeemCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RedeemCode, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RedeemCode); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RedeemCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRedeemCodes provides a mock function with given fields: ctx, query
func (_m *RedeemCodeDao) QueryRedeemCodes(ctx context.Context, query *model.RedeemCodeQuery) ([]*model.RedeemCode, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for QueryRedeemCodes")
	}

	var r0 []*model.RedeemCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RedeemCodeQuery) ([]*model.RedeemCode, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RedeemCodeQuery) []*model.RedeemCode); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RedeemCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RedeemCodeQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseRedeemCodeInTransaction provides a mock function with given fields: ctx, redeemCode, tx
func (_m *RedeemCodeDao) UseRedeemCodeInTransaction(ctx context.Context, redeemCode *model.RedeemCode, tx *gorm.DB) (int, error) {
	ret := _m.Called(ctx, redeemCode, tx)

	if len(ret) == 0 {
		panic("no return value specified for UseRedeemCodeInTransaction")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RedeemCode, *gorm.DB) (int, error)); ok {
		return rf(ctx, redeemCode, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RedeemCode, *gorm.DB) int); ok {
		r0 = rf(ctx, redeemCode, tx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RedeemCode, *gorm.DB) error); ok {
		r1 = rf(ctx, redeemCode, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRedeemCodeDao creates a new instance of RedeemCodeDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedeemCodeDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedeemCodeDao {
	mock := &RedeemCodeDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
